{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda Holo-fn","text":"<p>A minimal functional library for TypeScript featuring monads like <code>Maybe</code>, <code>Either</code> and <code>Result</code>. Built for composability and Rambda compatibility.</p> <p>\ud83d\udca1 Designed to work seamlessly with <code>pipe</code> from Rambda. Fully typed, immutable, and safe by default.</p> <p>Below you will find detailed explanations, examples, and usage instructions to help you get started with holo-fn.</p>"},{"location":"#table-of-contents","title":"\u2728 Table of Contents","text":"<ul> <li>Introduction</li> <li>Features</li> <li>Getting Started</li> <li>API Reference<ul> <li>Maybe</li> <li>Either</li> <li>Result</li> </ul> </li> <li>Contributing</li> <li>Changelog</li> </ul>"},{"location":"#introduction","title":"\ud83d\udca1 Introduction","text":"<p>holo-fn is a minimal functional library designed for TypeScript with full support for monads and functional programming principles. It includes commonly used monads like <code>Maybe</code>, <code>Either</code>, and <code>Result</code> for safe and composable functional programming.</p> <ul> <li>Designed to work seamlessly with <code>pipe</code> from <code>Rambda</code>.</li> <li>Fully typed, immutable by default, and safe for modern TypeScript development.</li> </ul>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\u2705 Functional types: <code>Maybe</code>, <code>Either</code>, <code>Result</code></li> <li>\u2699\ufe0f Pipe-friendly (Rambda/Ramda compatible)</li> <li>\ud83d\udd12 Immutable by default</li> <li>\ud83e\uddea 100% test coverage</li> <li>\u26a1\ufe0f Zero dependencies</li> <li>\ud83e\udde0 Full TypeScript inference</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#020-2025-04-26","title":"[0.2.0] - 2025-04-26","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Introduced the <code>equals</code> method for Maybe, Either, and Result types to compare instances of these types based on their internal values.</li> <li>Added curried functions for <code>equals</code> to allow for easier composition and usage:</li> <li><code>equalsM</code> for Maybe.</li> <li><code>equalsE</code> for Either.</li> <li><code>equalsR</code> for Result.</li> <li>New helper functions for easy comparison between monadic values.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Refined the API for better type inference and consistency across all functional types (<code>Maybe</code>, <code>Either</code>, <code>Result</code>).</li> <li>Improved type safety for curried functions in all monads.</li> </ul>"},{"location":"changelog/#010-2025-04-23","title":"[0.1.0] - 2025-04-23","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of holo-fn with core monads: <code>Maybe</code>, <code>Either</code>, and <code>Result</code>.</li> <li><code>Maybe</code> monad: <code>Just</code>, <code>Nothing</code>, and helper functions like <code>fromNullable</code>.</li> <li><code>Either</code> monad: <code>Left</code>, <code>Right</code>, <code>tryCatch</code>, <code>fromPromise</code>, <code>fromAsync</code>.</li> <li><code>Result</code> monad: <code>Ok</code>, <code>Err</code>, <code>fromThrowable</code>, <code>fromPromise</code>, <code>fromAsync</code>.</li> <li>Added curried handlers for <code>map</code>, <code>chain</code>, <code>unwrapOr</code>, and <code>match</code> for better composition and functional pipelines:</li> <li><code>mapE</code>, <code>chainE</code>, <code>unwrapOrE</code>, and <code>matchE</code> for <code>Either</code>.</li> <li><code>mapM</code>, <code>chainM</code>, <code>unwrapOrM</code>, and <code>matchM</code> for <code>Maybe</code>.</li> <li><code>mapR</code>, <code>chainR</code>, <code>unwrapOrR</code>, and <code>matchR</code> for <code>Result</code>.</li> </ul>"},{"location":"contributing/","title":"Contributing to holo-fn","text":"<p>Thank you for your interest in contributing to holo-fn! To keep things organized and make it easier for you to get involved, please read through the guidelines below.</p>"},{"location":"contributing/#setup","title":"\ud83d\ude80 Setup","text":""},{"location":"contributing/#1-install-dependencies","title":"1. Install Dependencies","text":"<p>To get started, clone the repository and install the dependencies:</p> <pre><code>git clone https://github.com/yourusername/holo-fn.git\ncd holo-fn\nnpm install\n</code></pre>"},{"location":"contributing/#2-running-tests","title":"2. Running Tests","text":"<p>You can run the tests using Jest to ensure everything works as expected:</p> <pre><code>npm run test\n</code></pre>"},{"location":"contributing/#3-test-coverage","title":"3. Test Coverage","text":"<p>To check test coverage:</p> <pre><code>npm run test:cov\n</code></pre>"},{"location":"contributing/#building","title":"\ud83d\udce6 Building","text":"<p>To build the project:</p> <pre><code>npm run build\n</code></pre> <p>This will transpile the TypeScript code into JavaScript.</p>"},{"location":"contributing/#testing-locally","title":"\ud83e\uddf0 Testing Locally","text":"<p>To test your changes locally before publishing or linking the library:</p> <ol> <li> <p>Build the Library:</p> </li> <li> <p>Run the following to build the project and prepare the files for testing:   <pre><code>npm run build\n</code></pre></p> </li> <li> <p>Pack the Library:</p> </li> <li> <p>After building, run npm pack to create a .tgz file that you can install locally:   <pre><code>npm pack\n</code></pre></p> </li> <li> <p>Install Locally in Your Test Project:</p> </li> <li> <p>In the project where you want to test the library, run the following:   <pre><code>npm install /path/to/holo-fn-&lt;version&gt;.tgz\n</code></pre></p> </li> <li> <p>This will install the library locally in your project, and you can import and use it as if it were an npm package.</p> </li> </ol>"},{"location":"contributing/#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<ol> <li>Fork the repository to your GitHub account and clone it locally.</li> <li>Create a new branch for your feature or fix:    <pre><code>git checkout -b feat/issue-number-or-short-description\n</code></pre></li> <li>Make your changes: add your feature or fix the bug.</li> <li>Commit your changes:    <pre><code>git commit -am 'feat: add new feature'  # or 'fix: resolve issue'\n</code></pre></li> <li>Push to your fork:    <pre><code>git push origin feat/issue-number-or-short-description\n</code></pre></li> <li>Create a pull request from your fork to the main repository.</li> </ol>"},{"location":"contributing/#guidelines","title":"\ud83c\udfaf Guidelines","text":"<ul> <li>Please write clear commit messages.</li> <li>Ensure all code is properly tested.</li> <li>Follow the code style used in the project.</li> </ul> <p>Thank you for contributing! \ud83d\ude80</p>"},{"location":"getting_started/","title":"\ud83d\ude80 Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>To install holo-fn in your project, use the following npm command:</p> <pre><code>npm install holo-fn\n</code></pre>"},{"location":"getting_started/#importing","title":"Importing","text":"<p>You can import specific monads or helpers as needed:</p> <pre><code>import { Just, Nothing, matchE } from 'holo-fn'\nimport { fromNullable } from 'holo-fn/maybe'\nimport { tryCatch } from 'holo-fn/either'\nimport { fromThrowable } from 'holo-fn/result'\n</code></pre>"},{"location":"getting_started/#api-reference","title":"\ud83d\udce6 API Reference","text":"<ul> <li>Maybe</li> <li>Either</li> <li>Result</li> </ul>"},{"location":"getting_started/#comparison-between-maybe-either-and-result","title":"\ud83d\udcda Comparison between Maybe, Either, and Result","text":"Aspect Maybe Either Result Purpose Represents a value that may be <code>null</code> or <code>undefined</code>. Represents an operation that can either succeed (<code>Right</code>) or fail (<code>Left</code>). Represents the result of an operation, which can either succeed (<code>Ok</code>) or fail with an error (<code>Err</code>). Types <code>Just&lt;T&gt;</code>, <code>Nothing</code> <code>Right&lt;R&gt;</code>, <code>Left&lt;L&gt;</code> <code>Ok&lt;T&gt;</code>, <code>Err&lt;E&gt;</code> Composition (map, chain) Supports <code>map</code>, <code>chain</code> for simple compositions. Supports <code>map</code>, <code>chain</code> for compositions involving success or failure. Supports <code>map</code>, <code>chain</code> for manipulating values or errors. Method to Access Value <code>getOrElse(defaultValue)</code> <code>getOrElse(defaultValue)</code> <code>unwrapOr(defaultValue)</code> Method for Success Case <code>isJust()</code>, <code>isNothing()</code> <code>isRight()</code>, <code>isLeft()</code> <code>isOk()</code>, <code>isErr()</code> Usage Example <code>fromNullable(value)</code> <code>new Right(value)</code> or <code>new Left(error)</code> <code>new Ok(value)</code> or <code>new Err(error)</code> When to Use When there is an optional value that may be <code>null</code> or <code>undefined</code>. When an operation can succeed or fail, and it is important to distinguish between them. When you need to clearly distinguish between success or failure in an operation. Common Helpers <code>fromNullable</code> <code>tryCatch</code>, <code>fromPromise</code> <code>fromThrowable</code>, <code>fromPromise</code>, <code>fromAsync</code> Example of <code>map</code> <code>maybeValue.map(value =&gt; value * 2)</code> <code>eitherValue.map(value =&gt; value * 2)</code> <code>resultValue.map(value =&gt; value * 2)</code> Example of <code>chain</code> <code>maybeValue.chain(value =&gt; fromNullable(value))</code> <code>eitherValue.chain(value =&gt; new Right(value))</code> <code>resultValue.chain(value =&gt; new Ok(value))</code>"},{"location":"getting_started/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in here.</p>"},{"location":"getting_started/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions to holo-fn! Please refer to the CONTRIBUTING.md for detailed instructions on how to run tests, build the library, and contribute.</p>"},{"location":"getting_started/#license","title":"\ud83d\udcdc License","text":"<p>MIT</p>"},{"location":"either/","title":"<code>Either&lt;L, R&gt;</code>","text":"<p><code>Either</code> is used for computations that may fail. It is either a <code>Left&lt;L&gt;</code> (error) or a <code>Right&lt;R&gt;</code> (success).</p> <pre><code>import { Right } from 'holo-fn/either'\n\nconst result = new Right(10)\n  .map(n =&gt; n * 2)\n  .unwrapOr(0)\n\nconsole.log(result); // 20\n</code></pre>"},{"location":"either/#methods","title":"Methods","text":""},{"location":"either/#mapfn-value-r-u-eitherl-u","title":"<code>map(fn: (value: R) =&gt; U): Either&lt;L, U&gt;</code>","text":"<p>Maps over the <code>Right</code> value. Does nothing for <code>Left</code>.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(10, 2)\n  .map(n =&gt; n * 2)\n  .unwrapOr(0);\n\nconsole.log(result1); // 10\n\nconst result2 = calculate(10, 0)\n  .map(n =&gt; n * 2)\n  .unwrapOr(0);\n\nconsole.log(result2); // 0\n</code></pre>"},{"location":"either/#mapleftmfn-err-l-m-eitherm-r","title":"<code>mapLeft&lt;M&gt;(fn: (err: L) =&gt; M): Either&lt;M, R&gt;</code>","text":"<p>Maps over the <code>Left</code> value. Does nothing for <code>Right</code>.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(10, 2)\n  .map(n =&gt; n * 2)\n  .mapLeft(e =&gt; console.log(`Error: ${e}`)) // No printing here\n  .unwrapOr(0);\n\nconsole.log(result1); // 10\n\nconst result2 = calculate(10, 0)\n  .map(n =&gt; n * 2)\n  .mapLeft(e =&gt; console.log(`Error: ${e}`)) // Prints \"Error: Division by zero\"\n  .unwrapOr(0);\n\nconsole.log(result2); // 0\n</code></pre>"},{"location":"either/#chainfn-value-r-eitherl-u-eitherl-u","title":"<code>chain(fn: (value: R) =&gt; Either&lt;L, U&gt;): Either&lt;L, U&gt;</code>","text":"<p>Chains the transformation if the value is <code>Right</code>. Returns <code>Left</code> otherwise.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(12, 2)\n  .chain(n =&gt; n &gt; 5 ? new Right(n * 2) : new Left(\"Result is too small\"))\n  .map(n =&gt; n + 1)\n  .mapLeft(e =&gt; console.log(`Error: ${e}`)) // Not run\n  .unwrapOr(0);\n\n\nconsole.log(result1); // 13\n\nconst result2 = calculate(10, 2)\n  .chain(n =&gt; n &gt; 5 ? new Right(n * 2) : new Left(\"Result is too small\"))\n  .map(n =&gt; n + 1)\n  .mapLeft(e =&gt; console.log(`Error: ${e}`)) // Prints \"Error: Result is too small\"\n  .unwrapOr(0);\n\nconsole.log(result2); // 0\n</code></pre>"},{"location":"either/#unwrapordefaultvalue-r-r","title":"<code>unwrapOr(defaultValue: R): R</code>","text":"<p>Returns the value of <code>Right</code>, or the default value for <code>Left</code>.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(12, 2).unwrapOr(0);\nconsole.log(result1); // 6\n\nconst result2 = calculate(10, 0).unwrapOr(-1);\nconsole.log(result2); // -1\n</code></pre>"},{"location":"either/#isright-boolean","title":"<code>isRight(): boolean</code>","text":"<p>Checks if the value is <code>Right</code>.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(12, 2).isRight();\nconsole.log(result1); // true\n\nconst result2 = calculate(10, 0).isRight();\nconsole.log(result2); // false\n</code></pre>"},{"location":"either/#isleft-boolean","title":"<code>isLeft(): boolean</code>","text":"<p>Checks if the value is <code>Left</code>.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(12, 2).isLeft();\nconsole.log(result1); // false\n\nconst result2 = calculate(10, 0).isLeft();\nconsole.log(result2); // true\n</code></pre>"},{"location":"either/#matchtcases-left-left-l-t-right-right-r-t-t","title":"<code>match&lt;T&gt;(cases: { left: (left: L) =&gt; T; right: (right: R) =&gt; T }): T</code>","text":"<p>Matches the value to execute either the <code>left</code> or <code>right</code> case.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(12, 2)\n  .chain(n =&gt; n &gt; 5 ? new Right(n * 2) : new Left(\"Result is too small\"))\n  .map(n =&gt; n + 1)\n  .match({\n    right: n =&gt; n,\n    left: e =&gt; {\n      console.log(`Error: ${e}`); // Not run\n      return 0;\n    }\n  });\n\nconsole.log(result1); // 13\n\nconst result2 = calculate(10, 2)\n  .chain(n =&gt; n &gt; 5 ? new Right(n * 2) : new Left(\"Result is too small\"))\n  .map(n =&gt; n + 1)\n  .match({\n    right: n =&gt; n,\n    left: e =&gt; {\n      console.log(`Error: ${e}`); // Prints \"Error: Result is too small\"\n      return 0;\n    }\n  });\n\nconsole.log(result2); // 0\n</code></pre>"},{"location":"either/#equalsother-eitherl-r-boolean","title":"<code>equals(other: Either&lt;L, R&gt;): boolean</code>","text":"<p>Compares <code>this</code> to another <code>Either</code>, returns <code>false</code> if the values inside are different.</p> <pre><code>import { Either, Left, Right } from \"holo-fn/either\";\n\nconst calculate = (a: number, b: number): Either&lt;string, number&gt; =&gt; {\n  if (b === 0) {\n    return new Left(\"Division by zero\");\n  }\n\n  return new Right(a / b);\n};\n\nconst result1 = calculate(12, 2)\n  .chain(n =&gt; n &gt; 5 ? new Right(n * 2) : new Left(\"Result is too small\"))\n  .map(n =&gt; n + 1);\n\nconsole.log(result1.equals(new Right(13))); // true\n\nconst result2 = calculate(10, 2)\n  .chain(n =&gt; n &gt; 5 ? new Right(n * 2) : new Left(\"Result is too small\"))\n  .map(n =&gt; n + 1);\n\nconsole.log(result2.equals(new Right(0))); // false\n</code></pre>"},{"location":"either/#helpers","title":"Helpers","text":""},{"location":"either/#trycatchfn-onerror","title":"<code>tryCatch(fn, onError?)</code>","text":"<p>Wraps a potentially throwing function in an <code>Either</code>.</p> <pre><code>import { tryCatch } from 'holo-fn/either'\n\nconst input = '{\"user\": \"John Doe\"}'\n\nconst parsed = tryCatch(() =&gt; JSON.parse(input), e =&gt; 'Invalid JSON')\n  .map(obj =&gt; obj.user)\n  .unwrapOr('anonymous')\n\nconsole.log(parsed) // John Doe\n</code></pre> <ul> <li>Returns <code>Right&lt;R&gt;</code> if <code>fn()</code> succeeds</li> <li>Returns <code>Left&lt;L&gt;</code> if it throws, using <code>onError</code> if provided</li> </ul>"},{"location":"either/#frompromisepromise-onerror","title":"<code>fromPromise(promise, onError?)</code>","text":"<p>Wraps a <code>Promise&lt;T&gt;</code> into a <code>Promise&lt;Either&lt;L, R&gt;&gt;</code>.</p> <pre><code>import { fromPromise } from 'holo-fn/either'\n\nconst result = await fromPromise(fetch('/api'), e =&gt; 'Network error')\n\nconsole.log(result) // _Left { value: 'Network error' }\n</code></pre> <ul> <li>Resolves to <code>Right&lt;R&gt;</code> on success</li> <li>Resolves to <code>Left&lt;L&gt;</code> on failure</li> </ul>"},{"location":"either/#fromasyncfn-onerror","title":"<code>fromAsync(fn, onError?)</code>","text":"<p>Same as <code>fromPromise</code>, but lazy \u2014 receives a function returning a Promise.</p> <pre><code>import { fromAsync } from 'holo-fn/either'\n\nconst result = await fromAsync(async () =&gt; await fetch('/api'), e =&gt; 'Request failed')\n\nconsole.log(result) // _Left { value: 'Request failed' }\n</code></pre> <ul> <li>Allows deferred execution</li> <li>Handles exceptions from <code>async () =&gt; ...</code></li> </ul>"},{"location":"either/#curried-helpers","title":"Curried Helpers","text":""},{"location":"either/#mape","title":"<code>mapE</code>","text":"<p>Curried version of <code>map</code> for <code>Either</code>. This allows functional composition with <code>pipe</code>.</p> <pre><code>import { mapE, Right } from 'holo-fn/either';\n\nconst result = pipe(\n  new Right(5),\n  mapE((x) =&gt; x * 2),\n  (res) =&gt; res.unwrapOr(0)\n);\n\nconsole.log(result); // 10\n</code></pre>"},{"location":"either/#maplefte","title":"<code>mapLeftE</code>","text":"<p>Curried version of <code>mapLeft</code> for <code>Either</code>. This allows mapping over the Left value in a functional pipeline.</p> <pre><code>import { Left, mapLeftE } from 'holo-fn/either';\n\nconst result = pipe(\n  new Left(\"Error\"),\n  mapLeftE((e) =&gt; `Mapped error: ${e}`),\n  (res) =&gt; res.unwrapOr(\"No value\") \n);\n\nconsole.log(result); // \"No value\"\n</code></pre>"},{"location":"either/#chaine","title":"<code>chainE</code>","text":"<p>Curried version of <code>chain</code> for <code>Either</code>. This allows chaining transformations on the Right value of <code>Either</code>, using a functional composition style.</p> <pre><code>import { Right, chainE } from 'holo-fn/either';\n\nconst result = pipe(\n  new Right(5),\n  chainE((x) =&gt; new Right(x + 5)),\n  (res) =&gt; res.unwrapOr(0)\n);\n\nconsole.log(result); // 10\n</code></pre>"},{"location":"either/#unwrapore","title":"<code>unwrapOrE</code>","text":"<p>Curried version of <code>unwrapOr</code> for <code>Either</code>. This provides a cleaner way to unwrap the value in a <code>Either</code>, returning a default value if it's <code>Left</code>.</p> <pre><code>import { Left, unwrapOrE } from 'holo-fn/either';\n\nconst result = pipe(\n  new Left(\"Fail\"),\n  unwrapOrE&lt;string, unknown&gt;(\"No value\")\n);\n\nconsole.log(result); // \"No value\"\n</code></pre>"},{"location":"either/#matche","title":"<code>matchE</code>","text":"<p>Curried version of <code>match</code> for <code>Either</code>. This allows handling <code>Left</code> and <code>Right</code> in a functional way.</p> <pre><code>import { matchE, Right } from 'holo-fn/either';\n\nconst result = pipe(\n  new Right(10),\n  matchE({\n    left: (e) =&gt; `Error: ${e}`,\n    right: (v) =&gt; `Success: ${v}`\n  })\n);\n\nconsole.log(result); // \"Success: 10\"\n</code></pre>"},{"location":"either/#equalse","title":"<code>equalsE</code>","text":"<p>Curried version of <code>equals</code> for <code>Either</code>. Compares <code>this</code> to another <code>Either</code>, returns <code>false</code> if the values inside are different.</p> <pre><code>import { equalsE, Right } from 'holo-fn/either';\n\nconst result = pipe(\n  new Right(10),\n  equalsE(new Right(10))\n);\n\nconsole.log(result); // true\n</code></pre>"},{"location":"maybe/","title":"<code>Maybe&lt;T&gt;</code>","text":"<p><code>Maybe</code> is used to represent a value that may or may not exist. It can either be a <code>Just&lt;T&gt;</code> or a <code>Nothing</code>.</p> <pre><code>import { fromNullable } from 'holo-fn/maybe'\n\nconst name = fromNullable('Rich')\n  .map(n =&gt; n.toUpperCase())\n  .unwrapOr('Anonymous')\n\nconsole.log(name) // RICH\n</code></pre>"},{"location":"maybe/#methods","title":"Methods","text":""},{"location":"maybe/#mapfn-value-t-u-maybeu","title":"<code>map(fn: (value: T) =&gt; U): Maybe&lt;U&gt;</code>","text":"<p>Maps over the <code>Just</code> value. Does nothing for <code>Nothing</code>.</p> <pre><code>import { Just, Nothing } from \"holo-fn/maybe\";\n\nconst result1 = new Just(5).map((n) =&gt; n * 2);\nconsole.log(result1.unwrapOr(0)); // 10\n\nconst result2 = new Nothing&lt;number&gt;().map((n) =&gt; n * 2);\nconsole.log(result2.unwrapOr(0)); // 0\n</code></pre>"},{"location":"maybe/#chainfn-value-t-maybeu-maybeu","title":"<code>chain(fn: (value: T) =&gt; Maybe&lt;U&gt;): Maybe&lt;U&gt;</code>","text":"<p>Chains the transformation if the value is <code>Just</code>. Returns <code>Nothing</code> otherwise.</p> <pre><code>import { Just, Nothing } from \"holo-fn/maybe\";\n\nconst result1 = new Just(5).chain((n) =&gt; new Just(n * 2));\nconsole.log(result1.unwrapOr(0)); // 10\n\nconst result2 = new Nothing&lt;number&gt;().chain((n) =&gt; new Just(n * 2));\nconsole.log(result2.unwrapOr(0)); // 0\n</code></pre>"},{"location":"maybe/#unwrapordefaultvalue-t-t","title":"<code>unwrapOr(defaultValue: T): T</code>","text":"<p>Returns the value of <code>Just</code>, or the default value for <code>Nothing</code>.</p> <pre><code>import { Just, Nothing } from \"holo-fn/maybe\";\n\nconst result1 = new Just(10);\nconsole.log(result1.unwrapOr(0)); // 10\n\nconst result2 = new Nothing&lt;number&gt;();\nconsole.log(result2.unwrapOr(0)); // 0\n</code></pre>"},{"location":"maybe/#isjust-boolean","title":"<code>isJust(): boolean</code>","text":"<p>Checks if the value is <code>Just</code>.</p> <pre><code>import { Just, Nothing } from \"holo-fn/maybe\";\n\nconst result1 = new Just(\"value\");\nconsole.log(result1.isJust()); // true\n\nconst result2 = new Nothing();\nconsole.log(result2.isJust()); // false\n</code></pre>"},{"location":"maybe/#isnothing-boolean","title":"<code>isNothing(): boolean</code>","text":"<p>Checks if the value is <code>Nothing</code>.</p> <pre><code>import { Just, Nothing } from \"holo-fn/maybe\";\n\nconst result1 = new Just(\"value\");\nconsole.log(result1.isNothing()); // false\n\nconst result2 = new Nothing();\nconsole.log(result2.isNothing()); // true\n</code></pre>"},{"location":"maybe/#matchucases-just-value-t-u-nothing-u-u","title":"<code>match&lt;U&gt;(cases: { just: (value: T) =&gt; U; nothing: () =&gt; U }): U</code>","text":"<p>Matches the value to execute either the <code>just</code> or <code>nothing</code> case.</p> <pre><code>import { Just, Nothing } from \"holo-fn/maybe\";\n\nconst result1 = new Just(\"value\").match({\n  just: (v) =&gt; `Has value: ${v}`,\n  nothing: () =&gt; \"No value\",\n});\nconsole.log(result1); // \"Has value: value\"\n\nconst result2 = new Nothing().match({\n  just: (v) =&gt; `Has value: ${v}`,\n  nothing: () =&gt; \"No value\",\n});\nconsole.log(result2); // \"No value\"\n</code></pre>"},{"location":"maybe/#equalsother-maybet-boolean","title":"<code>equals(other: Maybe&lt;T&gt;): boolean</code>","text":"<p>Compares the values inside <code>this</code> and the other, returns <code>true</code> if both are <code>Nothing</code> or if the values are equal.</p> <pre><code>import { Just, Nothing } from \"holo-fn/maybe\";\n\nconst result1 = new Just(\"value\").chain(v =&gt; new Just(v + \" modified\"));\n\nconsole.log(result1.equals(new Just(\"value\"))); // false\nconsole.log(result1.equals(new Just(\"value modified\"))); // true\n\nconst result2 = new Just(\"value\").chain(v =&gt; new Nothing());\nconsole.log(result2.equals(new Nothing())); // true\nconsole.log(result2.equals(new Just(\"value\"))); // false\n</code></pre>"},{"location":"maybe/#helpers","title":"Helpers","text":""},{"location":"maybe/#fromnullablevalue","title":"<code>fromNullable(value)</code>","text":"<p>Creates a <code>Maybe</code> from a value that might be <code>null</code> or <code>undefined</code>.</p> <pre><code>const maybeEmail = fromNullable(user.email)\n</code></pre> <ul> <li>Returns <code>Just&lt;T&gt;</code> if the value is not <code>null</code> or <code>undefined</code></li> <li>Returns <code>Nothing</code> otherwise</li> </ul>"},{"location":"maybe/#curried-helpers","title":"Curried Helpers","text":""},{"location":"maybe/#mapm","title":"<code>mapM</code>","text":"<p>Curried version of <code>map</code> for <code>Maybe</code>. This allows functional composition with <code>pipe</code>.</p> <pre><code>import { Just, mapM } from 'holo-fn/maybe';\n\nconst result = pipe(\n  new Just(10),\n  mapM((x) =&gt; x * 2),\n  (res) =&gt; res.unwrapOr(0)\n);\n\nconsole.log(result); // 20\n</code></pre>"},{"location":"maybe/#chainm","title":"<code>chainM</code>","text":"<p>Curried version of <code>chain</code> for <code>Maybe</code>. This allows chaining transformations in a functional pipeline.</p> <pre><code>import { chainM, Just } from 'holo-fn/maybe';\n\nconst result = pipe(\n  new Just(2),\n  chainM((x) =&gt; new Just(x * 10)),\n  (res) =&gt; res.unwrapOr(0)\n);\n\nconsole.log(result); // 20\n</code></pre>"},{"location":"maybe/#unwraporm","title":"<code>unwrapOrM</code>","text":"<p>Curried version of <code>unwrapOr</code> for <code>Maybe</code>. This provides a cleaner way to unwrap the value in a <code>Maybe</code>.</p> <pre><code>import { Nothing, unwrapOrM } from 'holo-fn/maybe';\n\nconst result = pipe(\n  new Nothing&lt;string&gt;(),\n  unwrapOrM(\"No value\")\n);\n\nconsole.log(result); // \"No value\"\n</code></pre>"},{"location":"maybe/#matchm","title":"<code>matchM</code>","text":"<p>Curried version of <code>match</code> for <code>Maybe</code>. This allows handling <code>Just</code> and <code>Nothing</code> in a functional way.</p> <pre><code>import { Just, matchM } from 'holo-fn/maybe';\n\nconst result = pipe(\n  new Just(\"hello\"),\n  matchM({\n    just: (v) =&gt; `Got ${v}`,\n    nothing: () =&gt; \"No value\"\n  })\n);\n\nconsole.log(result); // \"Got hello\"\n</code></pre>"},{"location":"maybe/#equalsm","title":"<code>equalsM</code>","text":"<p>Curried version of <code>equals</code> for <code>Maybe</code>. Compares the values inside <code>this</code> and the other, returns <code>true</code> if both are <code>Nothing</code> or if the values are equal.</p> <pre><code>import { equalsM, Just } from 'holo-fn/maybe';\n\nconst result = pipe(\n  new Just(10),\n  equalsM(new Just(10))\n);\n\nconsole.log(result); // true\n</code></pre>"},{"location":"result/","title":"<code>Result&lt;T, E&gt;</code>","text":"<p><code>Result</code> is used to represent computations that either succeed with a value (<code>Ok&lt;T&gt;</code>) or fail with an error (<code>Err&lt;E&gt;</code>).</p> <pre><code>import { Ok } from 'holo-fn/result'\n\nconst result = new Ok&lt;number, string&gt;(10)\n  .map(n =&gt; n + 1)\n  .unwrapOr(0)\n\nconsole.log(result) // 11\n</code></pre>"},{"location":"result/#methods","title":"Methods","text":""},{"location":"result/#mapfn-value-t-u-resultu-e","title":"<code>map(fn: (value: T) =&gt; U): Result&lt;U, E&gt;</code>","text":"<p>Maps over the <code>Ok</code> value. Does nothing for <code>Err</code>.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(5).map((n) =&gt; n * 2);\nconsole.log(result1.unwrapOr(0)); // 10\n\nconst result2 = new Err&lt;number, string&gt;(\"Error\").map((n) =&gt; n * 2);\nconsole.log(result2.unwrapOr(0)); // 0\n</code></pre>"},{"location":"result/#maperrfn-err-e-f-resultt-f","title":"<code>mapErr(fn: (err: E) =&gt; F): Result&lt;T, F&gt;</code>","text":"<p>Maps over the <code>Err</code> value. Does nothing for <code>Ok</code>.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(10).mapErr((e) =&gt; `Error: ${e}`);\nconsole.log(result1.unwrapOr(0)); // 10\n\nconst result2 = new Err(\"Fail\").mapErr((e) =&gt; `Mapped error: ${e}`);\nconsole.log(result2.unwrapOr(0)); // 0\n</code></pre>"},{"location":"result/#chainfn-value-t-resultu-e-resultu-e","title":"<code>chain(fn: (value: T) =&gt; Result&lt;U, E&gt;): Result&lt;U, E&gt;</code>","text":"<p>Chains the transformation if the value is <code>Ok</code>. Returns <code>Err</code> otherwise.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(5)\n  .chain((n) =&gt; new Ok(n * 2))\n  .unwrapOr(0);\nconsole.log(result1); // 10\n\nconst result2 = new Err&lt;number, string&gt;(\"Error\")\n  .chain((n) =&gt; new Ok(n * 2))\n  .unwrapOr(0);\nconsole.log(result2); // 0\n</code></pre>"},{"location":"result/#unwrapordefaultvalue-t-t","title":"<code>unwrapOr(defaultValue: T): T</code>","text":"<p>Returns the value of <code>Ok</code>, or the default value for <code>Err</code>.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(15).unwrapOr(0);\nconsole.log(result1); // 15\n\nconst result2 = new Err(\"Error\").unwrapOr(100);\nconsole.log(result2); // 100\n</code></pre>"},{"location":"result/#isok-boolean","title":"<code>isOk(): boolean</code>","text":"<p>Checks if the value is <code>Ok</code>.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(5);\nconsole.log(result1.isOk()); // true\n\nconst result2 = new Err(\"Error\");\nconsole.log(result2.isOk()); // false\n</code></pre>"},{"location":"result/#iserr-boolean","title":"<code>isErr(): boolean</code>","text":"<p>Checks if the value is <code>Err</code>.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(5);\nconsole.log(result1.isErr()); // false\n\nconst result2 = new Err(\"Error\");\nconsole.log(result2.isErr()); // true\n</code></pre>"},{"location":"result/#matchtcases-ok-value-t-t-err-err-e-t-t","title":"<code>match&lt;T&gt;(cases: { ok: (value: T) =&gt; T; err: (err: E) =&gt; T }): T</code>","text":"<p>Matches the value to execute either the <code>ok</code> or <code>err</code> case.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(10).match({\n  ok: (n) =&gt; `Success: ${n}`,\n  err: (e) =&gt; `Failure: ${e}`,\n});\nconsole.log(result1); // \"Success: 10\"\n\nconst result2 = new Err(\"Error\").match({\n  ok: (n) =&gt; `Success: ${n}`,\n  err: (e) =&gt; `Failure: ${e}`,\n});\nconsole.log(result2); // \"Failure: Error\"\n</code></pre>"},{"location":"result/#equalsother-resultt-e-boolean","title":"<code>equals(other: Result&lt;T, E&gt;): boolean</code>","text":"<p>Compares <code>this</code> to another <code>Result</code>, returns <code>false</code> if the values inside are different.</p> <pre><code>import { Ok, Err } from \"holo-fn/result\";\n\nconst result1 = new Ok(10);\nconsole.log(result1.equals(new Ok(10))); // true\nconsole.log(result1.equals(new Ok(20))); // false\nconsole.log(result1.equals(new Err(\"Error\"))); // false\n\n\nconst result2 = new Err(\"Error\");\nconsole.log(result2.equals(new Err(\"Error\"))); // true\nconsole.log(result1.equals(new Err(\"Error\"))); // false\nconsole.log(result2.equals(new Ok(10))); // false\n</code></pre>"},{"location":"result/#helpers","title":"Helpers","text":""},{"location":"result/#fromthrowablefn-onerror","title":"<code>fromThrowable(fn, onError?)</code>","text":"<p>Wraps a synchronous function in a <code>Result</code>.</p> <pre><code>import { fromThrowable } from 'holo-fn';\n\nconst input = '{\"name\": \"John\", \"age\": 30}'\n\nconst result = fromThrowable(() =&gt; JSON.parse(input), e =&gt; 'Invalid JSON')\n\nconsole.log(result) // _Ok { value: { name: 'John', age: 30 } }\n</code></pre> <ul> <li>Returns <code>Ok&lt;T&gt;</code> if <code>fn()</code> succeeds</li> <li>Returns <code>Err&lt;E&gt;</code> if it throws, using <code>onError</code> if provided</li> </ul>"},{"location":"result/#frompromisepromise-onerror","title":"<code>fromPromise(promise, onError?)</code>","text":"<p>Wraps a <code>Promise&lt;T&gt;</code> into a <code>Promise&lt;Result&lt;T, E&gt;&gt;</code>.</p> <pre><code>import { fromPromise } from 'holo-fn/result';\n\nconst result = await fromPromise(fetch('/api'), e =&gt; 'Network error')\n\nconsole.log(result) // _Err { error: 'Network error' }\n</code></pre> <ul> <li>Resolves to <code>Ok&lt;T&gt;</code> on success</li> <li>Resolves to <code>Err&lt;E&gt;</code> on failure</li> </ul>"},{"location":"result/#fromasyncfn-onerror","title":"<code>fromAsync(fn, onError?)</code>","text":"<p>Same as <code>fromPromise</code>, but lazy \u2014 receives a function returning a Promise.</p> <pre><code>import { fromAsync } from 'holo-fn/result';\n\nconst result = await fromAsync(() =&gt; fetch('/api'), e =&gt; 'Request failed')\n\nconsole.log(result) // _Err { error: 'Request failed' }\n</code></pre> <ul> <li>Allows deferred execution</li> <li>Handles exceptions from <code>async () =&gt; ...</code></li> </ul>"},{"location":"result/#curried-helpers","title":"Curried Helpers","text":""},{"location":"result/#mapr","title":"<code>mapR</code>","text":"<p>Curried version of the <code>map</code> function for <code>Result</code>. This allows you to apply a transformation to the Ok value in a more functional style.</p> <pre><code>import { mapR, Ok } from 'holo-fn/result';\n\nconst result = pipe(\n  new Ok(5),\n  mapR((x) =&gt; x * 2),\n  (res) =&gt; res.unwrapOr(0)\n);\n\nconsole.log(result); // 10\n</code></pre>"},{"location":"result/#maperrr","title":"<code>mapErrR</code>","text":"<p>Curried version of <code>mapErr</code> for <code>Result</code>. This allows handling errors in a more functional composition style.</p> <pre><code>import { Err, mapErrR } from 'holo-fn/result';\n\nconst result = pipe(\n  new Err(\"Error\"),\n  mapErrR((e) =&gt; `Mapped error: ${e}`),\n  (res) =&gt; res.unwrapOr(\"No value\")\n);\n\nconsole.log(result); // \"No value\"\n</code></pre>"},{"location":"result/#chainr","title":"<code>chainR</code>","text":"<p>Curried version of <code>chain</code> for <code>Result</code>. This allows you to chain transformations on the Ok value in a functional pipeline.</p> <pre><code>import { chainR, Ok } from 'holo-fn/result';\n\nconst result = pipe(\n  new Ok(10),\n  chainR((x) =&gt; new Ok(x + 5)),\n  (res) =&gt; res.unwrapOr(0)\n);\n\nconsole.log(result); // 15\n</code></pre>"},{"location":"result/#unwraporr","title":"<code>unwrapOrR</code>","text":"<p>Curried version of <code>unwrapOr</code> for <code>Result</code>. This provides a cleaner way to unwrap the value in a <code>Result</code>, returning a default value if it's <code>Err</code>.</p> <pre><code>import { Ok, unwrapOrR } from 'holo-fn/result';\n\nconst result = pipe(\n  new Ok(42),\n  unwrapOrR(0)\n);\n\nconsole.log(result); // 42\n</code></pre>"},{"location":"result/#matchr","title":"<code>matchR</code>","text":"<p>Curried version of <code>match</code> for <code>Result</code>. This allows you to handle both <code>Ok</code> and <code>Err</code> in a functional way, providing a clean way to handle both cases.</p> <pre><code>import { matchR, Ok } from 'holo-fn/result';\n\nconst result = pipe(\n  new Ok(10),\n  matchR({\n    ok: (v) =&gt; `Success: ${v}`,\n    err: (e) =&gt; `Error: ${e}`\n  })\n);\n\nconsole.log(result); // \"Success: 10\"\n</code></pre>"},{"location":"result/#equalsr","title":"<code>equalsR</code>","text":"<p>Curried version of <code>equals</code> for <code>Result</code>. Compares <code>this</code> to another <code>Result</code>, returns <code>false</code> if the values inside are different.</p> <pre><code>import { equalsR, Ok } from 'holo-fn/result';\n\nconst result1 = pipe(\n  new Ok(10),\n  equalsR(new Ok(10)),\n);\n\nconsole.log(result1); // true\n\nconst result2 = pipe(\n  new Ok(10),\n  equalsR(new Ok(11)),\n);\n\nconsole.log(result2); // false\n</code></pre>"}]}